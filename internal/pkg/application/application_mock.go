// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package application

import (
	"sync"
)

// Ensure, that IoTAgentMock does implement IoTAgent.
// If this is not the case, regenerate this file with moq.
var _ IoTAgent = &IoTAgentMock{}

// IoTAgentMock is a mock implementation of IoTAgent.
//
// 	func TestSomethingThatUsesIoTAgent(t *testing.T) {
//
// 		// make and configure a mocked IoTAgent
// 		mockedIoTAgent := &IoTAgentMock{
// 			NewMessageFunc: func(msg []byte) error {
// 				panic("mock out the NewMessage method")
// 			},
// 		}
//
// 		// use mockedIoTAgent in code that requires IoTAgent
// 		// and then make assertions.
//
// 	}
type IoTAgentMock struct {
	// NewMessageFunc mocks the NewMessage method.
	NewMessageFunc func(msg []byte) error

	// calls tracks calls to the methods.
	calls struct {
		// NewMessage holds details about calls to the NewMessage method.
		NewMessage []struct {
			// Msg is the msg argument value.
			Msg []byte
		}
	}
	lockNewMessage sync.RWMutex
}

// NewMessage calls NewMessageFunc.
func (mock *IoTAgentMock) NewMessage(msg []byte) error {
	if mock.NewMessageFunc == nil {
		panic("IoTAgentMock.NewMessageFunc: method is nil but IoTAgent.NewMessage was just called")
	}
	callInfo := struct {
		Msg []byte
	}{
		Msg: msg,
	}
	mock.lockNewMessage.Lock()
	mock.calls.NewMessage = append(mock.calls.NewMessage, callInfo)
	mock.lockNewMessage.Unlock()
	return mock.NewMessageFunc(msg)
}

// NewMessageCalls gets all the calls that were made to NewMessage.
// Check the length with:
//     len(mockedIoTAgent.NewMessageCalls())
func (mock *IoTAgentMock) NewMessageCalls() []struct {
	Msg []byte
} {
	var calls []struct {
		Msg []byte
	}
	mock.lockNewMessage.RLock()
	calls = mock.calls.NewMessage
	mock.lockNewMessage.RUnlock()
	return calls
}

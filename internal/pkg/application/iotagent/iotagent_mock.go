// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package iotagent

import (
	"context"
	"github.com/diwise/iot-agent/internal/pkg/application"
	"sync"
)

// Ensure, that AppMock does implement App.
// If this is not the case, regenerate this file with moq.
var _ App = &AppMock{}

// AppMock is a mock implementation of App.
//
//	func TestSomethingThatUsesApp(t *testing.T) {
//
//		// make and configure a mocked App
//		mockedApp := &AppMock{
//			MessageReceivedFunc: func(ctx context.Context, msg []byte, ue application.UplinkASFunc) error {
//				panic("mock out the MessageReceived method")
//			},
//		}
//
//		// use mockedApp in code that requires App
//		// and then make assertions.
//
//	}
type AppMock struct {
	// MessageReceivedFunc mocks the MessageReceived method.
	MessageReceivedFunc func(ctx context.Context, msg []byte, ue application.UplinkASFunc) error

	// calls tracks calls to the methods.
	calls struct {
		// MessageReceived holds details about calls to the MessageReceived method.
		MessageReceived []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Msg is the msg argument value.
			Msg []byte
			// Ue is the ue argument value.
			Ue application.UplinkASFunc
		}
	}
	lockMessageReceived sync.RWMutex
}

// MessageReceived calls MessageReceivedFunc.
func (mock *AppMock) MessageReceived(ctx context.Context, msg []byte, ue application.UplinkASFunc) error {
	if mock.MessageReceivedFunc == nil {
		panic("AppMock.MessageReceivedFunc: method is nil but App.MessageReceived was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Msg []byte
		Ue  application.UplinkASFunc
	}{
		Ctx: ctx,
		Msg: msg,
		Ue:  ue,
	}
	mock.lockMessageReceived.Lock()
	mock.calls.MessageReceived = append(mock.calls.MessageReceived, callInfo)
	mock.lockMessageReceived.Unlock()
	return mock.MessageReceivedFunc(ctx, msg, ue)
}

// MessageReceivedCalls gets all the calls that were made to MessageReceived.
// Check the length with:
//
//	len(mockedApp.MessageReceivedCalls())
func (mock *AppMock) MessageReceivedCalls() []struct {
	Ctx context.Context
	Msg []byte
	Ue  application.UplinkASFunc
} {
	var calls []struct {
		Ctx context.Context
		Msg []byte
		Ue  application.UplinkASFunc
	}
	mock.lockMessageReceived.RLock()
	calls = mock.calls.MessageReceived
	mock.lockMessageReceived.RUnlock()
	return calls
}

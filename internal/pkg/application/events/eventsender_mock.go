// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package events

import (
	"context"
	"github.com/diwise/messaging-golang/pkg/messaging"
	"sync"
)

// Ensure, that EventSenderMock does implement EventSender.
// If this is not the case, regenerate this file with moq.
var _ EventSender = &EventSenderMock{}

// EventSenderMock is a mock implementation of EventSender.
//
// 	func TestSomethingThatUsesEventSender(t *testing.T) {
//
// 		// make and configure a mocked EventSender
// 		mockedEventSender := &EventSenderMock{
// 			PublishFunc: func(ctx context.Context, m messaging.TopicMessage) error {
// 				panic("mock out the Publish method")
// 			},
// 			SendFunc: func(ctx context.Context, m messaging.CommandMessage) error {
// 				panic("mock out the Send method")
// 			},
// 			StartFunc: func() error {
// 				panic("mock out the Start method")
// 			},
// 			StopFunc: func() error {
// 				panic("mock out the Stop method")
// 			},
// 		}
//
// 		// use mockedEventSender in code that requires EventSender
// 		// and then make assertions.
//
// 	}
type EventSenderMock struct {
	// PublishFunc mocks the Publish method.
	PublishFunc func(ctx context.Context, m messaging.TopicMessage) error

	// SendFunc mocks the Send method.
	SendFunc func(ctx context.Context, m messaging.CommandMessage) error

	// StartFunc mocks the Start method.
	StartFunc func() error

	// StopFunc mocks the Stop method.
	StopFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// Publish holds details about calls to the Publish method.
		Publish []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// M is the m argument value.
			M messaging.TopicMessage
		}
		// Send holds details about calls to the Send method.
		Send []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// M is the m argument value.
			M messaging.CommandMessage
		}
		// Start holds details about calls to the Start method.
		Start []struct {
		}
		// Stop holds details about calls to the Stop method.
		Stop []struct {
		}
	}
	lockPublish sync.RWMutex
	lockSend    sync.RWMutex
	lockStart   sync.RWMutex
	lockStop    sync.RWMutex
}

// Publish calls PublishFunc.
func (mock *EventSenderMock) Publish(ctx context.Context, m messaging.TopicMessage) error {
	if mock.PublishFunc == nil {
		panic("EventSenderMock.PublishFunc: method is nil but EventSender.Publish was just called")
	}
	callInfo := struct {
		Ctx context.Context
		M   messaging.TopicMessage
	}{
		Ctx: ctx,
		M:   m,
	}
	mock.lockPublish.Lock()
	mock.calls.Publish = append(mock.calls.Publish, callInfo)
	mock.lockPublish.Unlock()
	return mock.PublishFunc(ctx, m)
}

// PublishCalls gets all the calls that were made to Publish.
// Check the length with:
//     len(mockedEventSender.PublishCalls())
func (mock *EventSenderMock) PublishCalls() []struct {
	Ctx context.Context
	M   messaging.TopicMessage
} {
	var calls []struct {
		Ctx context.Context
		M   messaging.TopicMessage
	}
	mock.lockPublish.RLock()
	calls = mock.calls.Publish
	mock.lockPublish.RUnlock()
	return calls
}

// Send calls SendFunc.
func (mock *EventSenderMock) Send(ctx context.Context, m messaging.CommandMessage) error {
	if mock.SendFunc == nil {
		panic("EventSenderMock.SendFunc: method is nil but EventSender.Send was just called")
	}
	callInfo := struct {
		Ctx context.Context
		M   messaging.CommandMessage
	}{
		Ctx: ctx,
		M:   m,
	}
	mock.lockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	mock.lockSend.Unlock()
	return mock.SendFunc(ctx, m)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//     len(mockedEventSender.SendCalls())
func (mock *EventSenderMock) SendCalls() []struct {
	Ctx context.Context
	M   messaging.CommandMessage
} {
	var calls []struct {
		Ctx context.Context
		M   messaging.CommandMessage
	}
	mock.lockSend.RLock()
	calls = mock.calls.Send
	mock.lockSend.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *EventSenderMock) Start() error {
	if mock.StartFunc == nil {
		panic("EventSenderMock.StartFunc: method is nil but EventSender.Start was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	return mock.StartFunc()
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedEventSender.StartCalls())
func (mock *EventSenderMock) StartCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}

// Stop calls StopFunc.
func (mock *EventSenderMock) Stop() error {
	if mock.StopFunc == nil {
		panic("EventSenderMock.StopFunc: method is nil but EventSender.Stop was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStop.Lock()
	mock.calls.Stop = append(mock.calls.Stop, callInfo)
	mock.lockStop.Unlock()
	return mock.StopFunc()
}

// StopCalls gets all the calls that were made to Stop.
// Check the length with:
//     len(mockedEventSender.StopCalls())
func (mock *EventSenderMock) StopCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStop.RLock()
	calls = mock.calls.Stop
	mock.lockStop.RUnlock()
	return calls
}

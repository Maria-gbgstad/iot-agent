// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storage

import (
	"context"
	"github.com/diwise/iot-agent/internal/pkg/application/types"
	"github.com/diwise/iot-agent/pkg/lwm2m"
	dmc "github.com/diwise/iot-device-mgmt/pkg/client"
	"sync"
)

// Ensure, that StorageMock does implement Storage.
// If this is not the case, regenerate this file with moq.
var _ Storage = &StorageMock{}

// StorageMock is a mock implementation of Storage.
//
//	func TestSomethingThatUsesStorage(t *testing.T) {
//
//		// make and configure a mocked Storage
//		mockedStorage := &StorageMock{
//			CloseFunc: func() error {
//				panic("mock out the Close method")
//			},
//			SaveFunc: func(ctx context.Context, se types.Event, device dmc.Device, payload types.SensorPayload, objects []lwm2m.Lwm2mObject, err error) error {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedStorage in code that requires Storage
//		// and then make assertions.
//
//	}
type StorageMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, se types.Event, device dmc.Device, payload types.SensorPayload, objects []lwm2m.Lwm2mObject, err error) error

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Se is the se argument value.
			Se types.Event
			// Device is the device argument value.
			Device dmc.Device
			// Payload is the payload argument value.
			Payload types.SensorPayload
			// Objects is the objects argument value.
			Objects []lwm2m.Lwm2mObject
			// Err is the err argument value.
			Err error
		}
	}
	lockClose sync.RWMutex
	lockSave  sync.RWMutex
}

// Close calls CloseFunc.
func (mock *StorageMock) Close() error {
	if mock.CloseFunc == nil {
		panic("StorageMock.CloseFunc: method is nil but Storage.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedStorage.CloseCalls())
func (mock *StorageMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *StorageMock) Save(ctx context.Context, se types.Event, device dmc.Device, payload types.SensorPayload, objects []lwm2m.Lwm2mObject, err error) error {
	if mock.SaveFunc == nil {
		panic("StorageMock.SaveFunc: method is nil but Storage.Save was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Se      types.Event
		Device  dmc.Device
		Payload types.SensorPayload
		Objects []lwm2m.Lwm2mObject
		Err     error
	}{
		Ctx:     ctx,
		Se:      se,
		Device:  device,
		Payload: payload,
		Objects: objects,
		Err:     err,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, se, device, payload, objects, err)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedStorage.SaveCalls())
func (mock *StorageMock) SaveCalls() []struct {
	Ctx     context.Context
	Se      types.Event
	Device  dmc.Device
	Payload types.SensorPayload
	Objects []lwm2m.Lwm2mObject
	Err     error
} {
	var calls []struct {
		Ctx     context.Context
		Se      types.Event
		Device  dmc.Device
		Payload types.SensorPayload
		Objects []lwm2m.Lwm2mObject
		Err     error
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
